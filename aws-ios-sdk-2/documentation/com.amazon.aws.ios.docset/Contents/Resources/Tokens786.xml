<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSIoTDataManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSIoTDataManager</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
            
			
			<NodeRef refid="786"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSIoTDataManager/setConfiguration:</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSIoTDataManager/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSIoTDataManager/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSIoTDataManager/defaultIoTDataManager</TokenIdentifier>
			<Abstract type="html">Returns the singleton service client. If the singleton object does not exist, the SDK instantiates the default service client with defaultServiceConfiguration from [AWSServiceManager defaultServiceManager]. The reference to this object is maintained by the SDK, and you do not need to retain it manually.</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>+ (instancetype)defaultIoTDataManager</Declaration>
			
			<ReturnValue><Abstract type="html">The default service client.</Abstract></ReturnValue>
			<Anchor>//api/name/defaultIoTDataManager</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSIoTDataManager/registerIoTDataManagerWithConfiguration:forKey:</TokenIdentifier>
			<Abstract type="html">Creates a service client with the given service configuration and registers it for the key.</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>+ (void)registerIoTDataManagerWithConfiguration:(AWSServiceConfiguration *)configuration forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">A service configuration object.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerIoTDataManagerWithConfiguration:forKey:</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSIoTDataManager/IoTDataManagerForKey:</TokenIdentifier>
			<Abstract type="html">Retrieves the service client associated with the key. You need to call + registerIoTDataManagerWithConfiguration:forKey: before invoking this method. If + registerIoTDataManagerWithConfiguration:forKey: has not been called in advance or the key does not exist, this method returns nil.</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>+ (instancetype)IoTDataManagerForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of the service client.</Abstract></ReturnValue>
			<Anchor>//api/name/IoTDataManagerForKey:</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSIoTDataManager/removeIoTDataManagerForKey:</TokenIdentifier>
			<Abstract type="html">Removes the service client associated with the key and release it.</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>+ (void)removeIoTDataManagerForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeIoTDataManagerForKey:</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSIoTDataManager/connectWithClientId:cleanSession:certificateId:statusCallback:</TokenIdentifier>
			<Abstract type="html">Initialises the MQTT session and connects to AWS IoT using certificate-based mutual authentication</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)connectWithClientId:(NSString *)clientId cleanSession:(BOOL)cleanSession certificateId:(NSString *)certificateId statusCallback:(void ( ^ ) ( AWSIoTMQTTStatus status ))callback</Declaration>
			<Parameters>
				<Parameter>
					<Name>clientId</Name>
					<Abstract type="html">The Client Identifier identifies the Client to the Server.</Abstract>
				</Parameter><Parameter>
					<Name>cleanSession</Name>
					<Abstract type="html">specifies if the server should discard previous session information.</Abstract>
				</Parameter><Parameter>
					<Name>certificateId</Name>
					<Abstract type="html">contains the ID of the certificate to use in the connection; must be in the keychain</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">Reference. When new mqtt session status is received the function of block will be called with new connection status.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">true if initialise finished with success</Abstract></ReturnValue>
			<Anchor>//api/name/connectWithClientId:cleanSession:certificateId:statusCallback:</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSIoTDataManager/connectUsingWebSocketWithClientId:cleanSession:statusCallback:</TokenIdentifier>
			<Abstract type="html">Initialises the MQTT session and connects to AWS IoT using WebSocket/SigV4 authentication.  IAM
credentials are taken from the current service configuration.</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)connectUsingWebSocketWithClientId:(NSString *)clientId cleanSession:(BOOL)cleanSession statusCallback:(void ( ^ ) ( AWSIoTMQTTStatus status ))callback</Declaration>
			<Parameters>
				<Parameter>
					<Name>clientId</Name>
					<Abstract type="html">The Client Identifier identifies the Client to the Server.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">Reference. When new mqtt session status is received the function of block will be called with new connection status.</Abstract>
				</Parameter><Parameter>
					<Name>certificateId</Name>
					<Abstract type="html">contains the ID of the certificate to use in the connection; must be in the keychain</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">true if initialise finished with success</Abstract></ReturnValue>
			<Anchor>//api/name/connectUsingWebSocketWithClientId:cleanSession:statusCallback:</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSIoTDataManager/disconnect</TokenIdentifier>
			<Abstract type="html">Disconnect from a mqtt client (close current mqtt session)</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>- (void)disconnect</Declaration>
			
			
			<Anchor>//api/name/disconnect</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSIoTDataManager/publishString:onTopic:</TokenIdentifier>
			<Abstract type="html">Send MQTT message to specified topic</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>- (void)publishString:(NSString *)str onTopic:(NSString *)topic</Declaration>
			<Parameters>
				<Parameter>
					<Name>topic</Name>
					<Abstract type="html">The topic for publish to.</Abstract>
				</Parameter><Parameter>
					<Name>message</Name>
					<Abstract type="html">The message (As NSString object) to be sent.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/publishString:onTopic:</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSIoTDataManager/publishData:onTopic:</TokenIdentifier>
			<Abstract type="html">Send MQTT message to specified topic</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>- (void)publishData:(NSData *)data onTopic:(NSString *)topic</Declaration>
			<Parameters>
				<Parameter>
					<Name>topic</Name>
					<Abstract type="html">The topic for publish to.</Abstract>
				</Parameter><Parameter>
					<Name>message</Name>
					<Abstract type="html">The message (As NSData) to be sent.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/publishData:onTopic:</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSIoTDataManager/subscribeToTopic:qos:messageCallback:</TokenIdentifier>
			<Abstract type="html">Subscribes to a topic at a specific QoS level</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>- (void)subscribeToTopic:(NSString *)topic qos:(UInt8)qos messageCallback:(AWSIoTMQTTNewMessageBlock)callback</Declaration>
			<Parameters>
				<Parameter>
					<Name>topic</Name>
					<Abstract type="html">The Topic to subscribe to.</Abstract>
				</Parameter><Parameter>
					<Name>qos</Name>
					<Abstract type="html">Specifies the QoS Level of the subscription. Can be 0, 1, or 2.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">Reference to AWSIOTMQTTNewMessageBlock. When new message is received the function of block will be called.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/subscribeToTopic:qos:messageCallback:</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSIoTDataManager/unsubscribeTopic:</TokenIdentifier>
			<Abstract type="html">Unsubscribes from a topic</Abstract>
			<DeclaredIn>AWSIoTDataManager.h</DeclaredIn>
			
			<Declaration>- (void)unsubscribeTopic:(NSString *)topic</Declaration>
			<Parameters>
				<Parameter>
					<Name>topic</Name>
					<Abstract type="html">The Topic to unsubscribe from.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/unsubscribeTopic:</Anchor>
            <NodeRef refid="786"/>
		</Token>
		
        
        
	</File>
</Tokens>