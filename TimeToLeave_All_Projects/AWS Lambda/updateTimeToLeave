// DynamoDB Node.js API Reference
// http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html


/*************************************************************************
Program Outline

1) Get a list of users (and handle lists longer than 100 items)
2) For each user/device pair get a list of destinations (across devices)
3) For each destination:
    a) Build the http.request for that destination/device
    b) Send the request to Google Maps
    c) Calculate the TTL for that destination/device
    d) Store the TTL for that destination/device
*************************************************************************/

'use strict';
//var unmarshalItem = require('dynamodb-marshaler').unmarshalItem;
console.log('Loading function');

let doc = require('dynamodb-doc');
let dynamo = new doc.DynamoDB();

// Create variables to hold the two table names
let destinationTableName = 'ttlTempTable6';
let userTableName = 'ttlTempTable5';


exports.handler = (event, context, callback) => {

    // Prepare to scan the User Table
    var userParams = {
        TableName: userTableName
    };

    // 1) Scan the User Table to get all user / device pairs in the database
    dynamo.scan(userParams, function(err, data) {
      if (err) console.log(err, err.stack); // an error occurred
      else  {
                // 2) For each user/device pair get a list of destinations (across devices)
                data.Items.forEach(function(user){

                    var queryParams = {
                        TableName : destinationTableName,
                        KeyConditionExpression: '#id = :uuid',
                        ExpressionAttributeNames:{
                            '#id': 'uniqueUserID'
                        },
                        ExpressionAttributeValues: {
                            ':uuid':user.uniqueUserID
                        }
                    };

                    dynamo.query(queryParams, function(err, data){
                        if(err) console.log(err, err.stack);
                        else {
                            //console.log(data);
                            // 3) For each destination:
                                // a) Build the http.request for that destination/device
                            data.Items.forEach(function(destination){
                                // Start small by finding the origin and destination
                                console.log('User Origin: ', user.jsonUser.locationManager.location.coordinate.latitude, ' : ', user.jsonUser.locationManager.location.coordinate.longitude);
                                console.log('Destination: ', destination.jsonDestination.destinationMapItem.placemark.coordinate.latitude, ' : ', destination.jsonDestination.destinationMapItem.placemark.coordinate.longitude)
                            });
                        }
                    });

                });
            }
      });

};
