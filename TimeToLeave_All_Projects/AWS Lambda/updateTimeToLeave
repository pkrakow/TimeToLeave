// DynamoDB Node.js API Reference
// http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html


/*************************************************************************
Program Outline

1) [Done] Get a list of users ( [Not Done] and handle lists longer than 100 items)
2) [Done] For each user/device pair get a list of destinations (across devices)
3) For each destination:
    a) [Done] Build the http.request for that destination/device
    b) [Done] Send the request to Google Maps
    c) [Done] Calculate the TTL for that destination/device
    d) [Not Done] Store the TTL for that destination/device
*************************************************************************/

'use strict';
//var unmarshalItem = require('dynamodb-marshaler').unmarshalItem;
console.log('Loading function');

// Create the dynamoDB object
let doc = require('dynamodb-doc');
let dynamo = new doc.DynamoDB();

// Create constants to hold the two table names
let destinationTableName = 'ttlTempTable6';
let userTableName = 'ttlTempTable5';


// This is the exports handler
exports.handler = (event, context, callback) => {

    // Create the http object to make http.request calls to Google Maps
    var http = require('http');

    // Prepare to scan the User Table
    var userParams = {
        TableName: userTableName
    };

    // 1) Scan the User Table to get all user / device pairs in the database
    dynamo.scan(userParams, function(err, data) {
      if (err) console.log(err, err.stack); // an error occurred
      else  {
                // 2) For each user/device pair get a list of destinations (across devices)
                data.Items.forEach(function(user){

                    var queryParams = {
                        TableName : destinationTableName,
                        KeyConditionExpression: '#id = :uuid',
                        ExpressionAttributeNames:{
                            '#id': 'uniqueUserID'
                        },
                        ExpressionAttributeValues: {
                            ':uuid':user.uniqueUserID
                        }
                    };

                    dynamo.query(queryParams, function(err, data){
                        if(err) console.log('Error: ' , err, err.stack);
                        else {
                            //console.log(data);
                            // 3) For each destination:
                                // a) Build the http.request for that destination/device
                            data.Items.forEach(function(destination){
                                // Build up the url path for the http request to the Google Maps API
                                let userOrigin = (user.jsonUser.locationManager.location.coordinate.latitude + ',' + user.jsonUser.locationManager.location.coordinate.longitude);
                                let userDestination = (destination.jsonDestination.destinationMapItem.placemark.coordinate.latitude + ',' + destination.jsonDestination.destinationMapItem.placemark.coordinate.longitude);
                                let userMode = 'driving';
                                let userPath = ('/maps/api/distancematrix/json?origins='+ userOrigin+ '&destinations='+ userDestination+ '&mode='+ userMode+ '&language=en-US&units=imperial');

                                // Build the url for the http.request to the Google Maps API
                                var options = {
                                    hostname: 'maps.googleapis.com',
                                    //path: '/maps/api/distancematrix/json?origins=2043+Mezes+Avenue+Belmont+CA+94002&destinations=701+North+First+Street+Sunnyvale+CA+94089&mode=driving&language=en-US&units=imperial'
                                    path:  userPath
                                };
                                //console.log(options);

                                // jsonDistanceMatrix holds the json object that the Google Maps API returns
                                var jsonDistanceMatrix;


                                // This function processes the response from the http.request to the Google Maps API (below)
                                callback = function(response) {

                                        // This is a string to hold the response
                                        var str = '';

                                        // Each time a chunk of data is received, append it to `str`
                                        response.on('data', function (chunk) {
                                            str += chunk;
                                            });

                                        // Once the whole response has been recieved, load it into the json object
                                        response.on('end', function () {
                                            jsonDistanceMatrix = JSON.parse(str);
                                            console.log('destination_address = ', jsonDistanceMatrix.destination_addresses[0]);
                                            console.log('arrivalTime = ', destination.jsonDestination.arrivalTime);
                                            console.log('duration = ', jsonDistanceMatrix.rows[0].elements[0].duration.text);

                                            // Store the travel time string in an array
                                            var travelTimeStringArray = jsonDistanceMatrix.rows[0].elements[0].duration.text.split(" ");

                                            // Map the numbers to numeric values
                                            travelTimeStringArray = travelTimeStringArray.map(function (val) { return +val; });
                                            console.log('travelTimeStringArray = ', travelTimeStringArray);

                                            // Break out the numeric values of the travel time hours and minutes to calculate the departure time
                                            var travelTimeHours = 0;
                                            var travelTimeMinutes = 0;

                                            if( travelTimeStringArray.length == 4 ) {
                                                travelTimeHours = travelTimeStringArray[0];
                                                travelTimeMinutes = travelTimeStringArray[2];
                                            } else {
                                                travelTimeHours = 0;
                                                travelTimeMinutes = travelTimeStringArray[0];
                                            }
                                            console.log('travelTimeHours = ', travelTimeHours);
                                            console.log('travelTimeMinutes = ', travelTimeMinutes);

                                            // Store the arrival time string in an array
                                            var arrivalTimeStringArray = destination.jsonDestination.arrivalTime.split(" ");
                                            //arrivalTimeStringArray = arrivalTimeStringArray.map(function (val) { return +val + 1; });
                                            var departureTimeHour = arrivalTimeStringArray[1].split(":")[0];
                                            var departureTimeMinute = arrivalTimeStringArray[1].split(":")[1];
                                            var departureTimeMeridien = arrivalTimeStringArray[2];

                                            // Calculate the new departure time
                                            console.log('travelTimeMinutes = ', travelTimeMinutes);


                                            departureTimeMinute -= travelTimeMinutes;
                                            if(departureTimeMinute < 0){
                                                departureTimeHour -= 1;
                                                departureTimeMinute += 60;
                                            }
                                            departureTimeHour -= travelTimeHours;
                                            if(departureTimeHour < 1){
                                                departureTimeHour += 12;
                                                if(departureTimeMeridien == 'AM'){
                                                    departureTimeMeridien = 'PM';
                                                } else {
                                                    departureTimeMeridien = 'AM';
                                                }
                                            }

                                            // Store the new departure time
                                            var departureTimeStringArray = destination.jsonDestination.departureTime.split(" ");
                                            departureTimeStringArray[1] = departureTimeHour + ':' + departureTimeMinute;
                                            departureTimeStringArray[2] = departureTimeMeridien;
                                            destination.jsonDestination.departureTime = departureTimeStringArray[0] + ' ' + departureTimeStringArray[1] + ' ' + departureTimeStringArray[2];
                                            console.log('departureTime = ', destination.jsonDestination.departureTime);
                                            // don't forget to put it back in DynamoDB...

                                            });
                                };

                                // Make the http.request to the Google Maps API
                                http.request(options, callback).end();
                            });
                        }
                    });
                });
            }
    });
};
